namespace Len.StronglyTypedId.Generators;

internal class NewtonsoftJsonCodeGenerator : ICodeGenerator
{
    internal static readonly ICodeGenerator Instance = new NewtonsoftJsonCodeGenerator();

    public string Name { get; } = nameof(NewtonsoftJsonCodeGenerator);

    public int Order { get; } = 2;

    public void Excute(ImmutableArray<StronglyTypedIdTypeInfo> stronglyTypedIdInfos, ImmutableArray<ModuleInfo> modules, SourceProductionContext context, string version)
    {
        foreach (var item in stronglyTypedIdInfos)
        {
            var code = $$"""
                // <auto-generated />
                
                namespace {{item.Namespace}};
                
                #nullable enable
                
                [global::Newtonsoft.Json.JsonConverter(typeof(NewtonsoftJsonConverter))]
                partial record{{item.TypeKindName}} {{item.Name}}
                {
                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(NewtonsoftJsonCodeGenerator)}}", "{{version}}")]
                    class NewtonsoftJsonConverter : global::Newtonsoft.Json.JsonConverter<{{item.Name}}?>
                    {
                        /// <inheritdoc/>
                        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(NewtonsoftJsonCodeGenerator)}}", "{{version}}")]
                        public override {{item.Name}}? ReadJson(
                            global::Newtonsoft.Json.JsonReader reader,
                            global::System.Type objectType,
                            {{item.Name}}? existingValue,
                            bool hasExistingValue,
                            global::Newtonsoft.Json.JsonSerializer serializer) =>
                            serializer.Deserialize<{{item.PrimitiveIdTypeName}}?>(reader) switch
                            {
                                { } value => new {{item.Name}}(value),
                                null when (objectType.IsClass || Nullable.GetUnderlyingType(objectType) is not null) => null,
                                _ => throw new InvalidOperationException($"Cannot get the value of a token type '{reader.TokenType}' as a {{item.Name}}")
                            };
                
                        /// <inheritdoc/>
                        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(NewtonsoftJsonCodeGenerator)}}", "{{version}}")]
                        public override void WriteJson(
                            global::Newtonsoft.Json.JsonWriter writer,
                            {{item.Name}}? value,
                            global::Newtonsoft.Json.JsonSerializer serializer)
                        {
                            if (value is { Value: var primitiveId })
                            {
                                writer.WriteValue(primitiveId);
                            }
                            else
                            {
                                writer.WriteNull();
                            }
                        }
                    }
                }
                """;

            context.AddSource($"{item.FullName}.NewtonsoftJson.g.cs", code);
        }
    }
}
