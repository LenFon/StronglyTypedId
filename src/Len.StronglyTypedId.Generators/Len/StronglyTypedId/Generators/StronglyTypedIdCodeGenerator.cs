namespace Len.StronglyTypedId.Generators;

internal class StronglyTypedIdCodeGenerator : ICodeGenerator
{
    internal static readonly ICodeGenerator Instance = new StronglyTypedIdCodeGenerator();

    public string Name { get; } = nameof(StronglyTypedIdCodeGenerator);

    public int Order { get; } = 0;

    public void Excute(ImmutableArray<StronglyTypedIdTypeInfo> stronglyTypedIdInfos, ImmutableArray<ModuleInfo> modules, SourceProductionContext context, string version)
    {
        //Debugger.Launch();
        foreach (var item in stronglyTypedIdInfos)
        {
            var code = $$"""
                // <auto-generated />

                namespace {{item.Namespace}};

                #nullable enable

                partial record{{item.TypeKindName}} {{item.Name}} :
                    global::Len.StronglyTypedId.IStronglyTypedId<{{item.Name}}, {{item.PrimitiveIdTypeName}}>,
                    global::System.IParsable<{{item.Name}}>,
                    global::System.Numerics.IEqualityOperators<{{item.Name}}, {{item.Name}}, bool>
                {
                    public static {{item.Name}} Create({{item.PrimitiveIdTypeName}} value) => new {{item.Name}}(value);

                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(StronglyTypedIdCodeGenerator)}}", "{{version}}")]
                    public static {{item.Name}} Parse(string value, global::System.IFormatProvider? provider)
                    {
                        if (!TryParse(value, provider, out var id))
                        {
                            throw new global::System.ArgumentException("Could not parse supplied value.", nameof(value));
                        }

                        return id;
                    }

                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(StronglyTypedIdCodeGenerator)}}", "{{version}}")]
                    public static bool TryParse(
                        [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? value,
                        global::System.IFormatProvider? provider,
                        [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out {{item.Name}} result)
                    {
                        if ({{(item.PrimitiveIdTypeName == "string" ? "value is { Length: > 0 } val" : $"{item.PrimitiveIdTypeName}.TryParse(value, provider, out var val)")}})
                        {
                            result = new {{item.Name}}(val);
                            return true;
                        }

                        result = default;
                        return false;
                    }
                }
                """;

            context.AddSource($"{item.FullName}.g.cs", code);
        }
    }
}