namespace Len.StronglyTypedId.Generators;

internal class SystemTextJsonCodeGenerator : ICodeGenerator
{
    internal static readonly ICodeGenerator Instance = new SystemTextJsonCodeGenerator();

    public string Name { get; } = nameof(SystemTextJsonCodeGenerator);

    public int Order { get; } = 1;

    public void Excute(ImmutableArray<StronglyTypedIdTypeInfo> stronglyTypedIdInfos, ImmutableArray<ModuleInfo> modules, SourceProductionContext context, string version)
    {
        foreach (var item in stronglyTypedIdInfos)
        {
            var code = $$"""
                // <auto-generated />
                
                namespace {{item.Namespace}};
                
                #nullable enable
                
                [global::System.Text.Json.Serialization.JsonConverter(typeof(SystemTextJsonConverter))]
                partial record{{item.TypeKindName}} {{item.Name}}
                {
                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(SystemTextJsonCodeGenerator)}}", "{{version}}")]
                    class SystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<{{item.Name}}>
                    {
                        /// <inheritdoc/>
                        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(SystemTextJsonCodeGenerator)}}", "{{version}}")]
                        public override {{item.Name}} Read(
                            ref global::System.Text.Json.Utf8JsonReader reader, 
                            global::System.Type typeToConvert, 
                            global::System.Text.Json.JsonSerializerOptions options) =>
                            global::System.Text.Json.JsonSerializer.Deserialize<{{item.PrimitiveIdTypeName}}?>(ref reader, options) switch
                            {
                                { } value => new {{item.Name}}(value),
                                _ => throw new InvalidOperationException($"Cannot get the value of a token type '{reader.TokenType}' as a {{item.Name}}")
                            };
                
                        /// <inheritdoc/>
                        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(SystemTextJsonCodeGenerator)}}", "{{version}}")]
                        public override void Write(
                            global::System.Text.Json.Utf8JsonWriter writer, 
                            {{item.Name}} value, 
                            global::System.Text.Json.JsonSerializerOptions options)
                        {
                            if (value is { Value: var primitiveId })
                            {
                                global::System.Text.Json.JsonSerializer.Serialize(writer, primitiveId, options);
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                        }
                    }
                }
                """;

            context.AddSource($"{item.FullName}.SystemTextJson.g.cs", code);
        }
    }
}