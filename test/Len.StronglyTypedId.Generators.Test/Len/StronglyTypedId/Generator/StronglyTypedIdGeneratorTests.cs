using FluentAssertions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;

namespace Len.StronglyTypedId.Generators;

public class StronglyTypedIdGeneratorTests
{
    //[ThingUnderTest]_Should_[ExpecteedResult]_[Conditions]
    [Theory]
    [InlineData("record")]
    [InlineData("record struct")]
    public void Should_ReturnGeneratedCode_WhenCorrectSourceCode(string record)
    {
        var code = $""""
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public partial {record} OrderId(Guid Value);
            """";
        List<string> expectedCodes = GetExpectedCodes(record);

        // Act
        var actualCodes = GetGeneratedCode(code);

        // Assert
        var verifier = new XUnitVerifier();

        actualCodes
            .Should()
            .SatisfyRespectively(
                first => verifier.EqualOrDiff(expectedCodes[0], first),
                second => verifier.EqualOrDiff(expectedCodes[1], second),
                third => verifier.EqualOrDiff(expectedCodes[2], third)
            );
    }

    private static List<string> GetExpectedCodes(string record = "record")
    {
        return new List<string>
        {
            $$"""
            // <auto-generated />
            
            namespace Len.StronglyTypedId;
            
            #nullable enable
            
            partial {{record}} OrderId :
                global::Len.StronglyTypedId.IStronglyTypedId<OrderId, Guid>,
                global::System.IParsable<OrderId>,
                global::System.Numerics.IEqualityOperators<OrderId, OrderId, bool>
            {
                public static OrderId Create(Guid value) => new OrderId(value);
            
                /// <inheritdoc/>
                [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("StronglyTypedIdCodeGenerator", "1.0.0")]
                public static OrderId Parse(string value, global::System.IFormatProvider? provider)
                {
                    if (!TryParse(value, provider, out var id))
                    {
                        throw new global::System.ArgumentException("Could not parse supplied value.", nameof(value));
                    }
            
                    return id;
                }
            
                /// <inheritdoc/>
                [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("StronglyTypedIdCodeGenerator", "1.0.0")]
                public static bool TryParse(
                    [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? value,
                    global::System.IFormatProvider? provider,
                    [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out OrderId result)
                {
                    if (Guid.TryParse(value, provider, out var val))
                    {
                        result = new OrderId(val);
                        return true;
                    }
            
                    result = default;
                    return false;
                }
            }
            """,
            $$"""
            // <auto-generated />
            
            namespace Len.StronglyTypedId;
            
            #nullable enable
            
            [global::System.Text.Json.Serialization.JsonConverter(typeof(SystemTextJsonConverter))]
            partial {{record}} OrderId
            {
                /// <inheritdoc/>
                [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("SystemTextJsonCodeGenerator", "1.0.0")]
                class SystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<OrderId>
                {
                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("SystemTextJsonCodeGenerator", "1.0.0")]
                    public override OrderId Read(
                        ref global::System.Text.Json.Utf8JsonReader reader, 
                        global::System.Type typeToConvert, 
                        global::System.Text.Json.JsonSerializerOptions options) =>
                        global::System.Text.Json.JsonSerializer.Deserialize<Guid?>(ref reader, options) switch
                        {
                            { } value => new OrderId(value),
                            _ => throw new global::System.InvalidOperationException($"Cannot get the value of a token type '{reader.TokenType}' as a OrderId")
                        };
            
                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("SystemTextJsonCodeGenerator", "1.0.0")]
                    public override void Write(
                        global::System.Text.Json.Utf8JsonWriter writer, 
                        OrderId value, 
                        global::System.Text.Json.JsonSerializerOptions options)
                    {
                        if (value is { Value: var primitiveId })
                        {
                            global::System.Text.Json.JsonSerializer.Serialize(writer, primitiveId, options);
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                }
            }
            """,
            $$""""
            // <auto-generated />

            namespace Len.StronglyTypedId;

            #nullable enable

            [global::Newtonsoft.Json.JsonConverter(typeof(NewtonsoftJsonConverter))]
            partial {{record}} OrderId
            {
                /// <inheritdoc/>
                [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NewtonsoftJsonCodeGenerator", "1.0.0")]
                class NewtonsoftJsonConverter : global::Newtonsoft.Json.JsonConverter<OrderId?>
                {
                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NewtonsoftJsonCodeGenerator", "1.0.0")]
                    public override OrderId? ReadJson(
                        global::Newtonsoft.Json.JsonReader reader,
                        global::System.Type objectType,
                        OrderId? existingValue,
                        bool hasExistingValue,
                        global::Newtonsoft.Json.JsonSerializer serializer) =>
                        serializer.Deserialize<Guid?>(reader) switch
                        {
                            { } value => new OrderId(value),
                            null when (objectType.IsClass || Nullable.GetUnderlyingType(objectType) is not null) => null,
                            _ => throw new global::System.InvalidOperationException($"Cannot get the value of a token type '{reader.TokenType}' as a OrderId")
                        };

                    /// <inheritdoc/>
                    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NewtonsoftJsonCodeGenerator", "1.0.0")]
                    public override void WriteJson(
                        global::Newtonsoft.Json.JsonWriter writer,
                        OrderId? value,
                        global::Newtonsoft.Json.JsonSerializer serializer)
                    {
                        if (value is { Value: var primitiveId })
                        {
                            writer.WriteValue(primitiveId);
                        }
                        else
                        {
                            writer.WriteNull();
                        }
                    }
                }
            }
            """"
        };
    }

    [Fact]
    public void Should_ReturnEmpty_WhenNotPartial()
    {
        var code = """"
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public record OrderId(Guid Value);
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    [Fact]
    public void Should_ReturnEmpty_WhenConstructorNoArguments()
    {
        var code = """"
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public partial record OrderId();
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    [Fact]
    public void Should_ReturnEmpty_WhenNotRecord()
    {
        var code = """"
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public partial class OrderId{}
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    [Fact]
    public void Should_ReturnEmpty_WhenAbstractRecord()
    {
        var code = """"
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public abstract partial record OrderId(Guid Value);
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    [Fact]
    public void Should_ReturnEmpty_WhenArgumentsIsNullable()
    {
        var code = """"
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public partial record OrderId(Guid? Value);
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    [Fact]
    public void Should_ReturnEmpty_WhenNotSupportedType()
    {
        var code = """"
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public partial record OrderId(bool Value);
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    [Fact]
    public void Should_ReturnEmpty_WhenArgumentNameIsOther()
    {
        var code = """"
            namespace Len.StronglyTypedId;

            [StronglyTypedId]
            public partial record OrderId(Guid value);
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    [Fact]
    public void Should_ReturnEmpty_WhenNotNamespace()
    {
        var code = """"
            [StronglyTypedId]
            public partial record OrderId(Guid Value);
            """";

        GetGeneratedCode(code).Should().BeEmpty();
    }

    private static IEnumerable<string?> GetGeneratedCode(string sourceCode)
    {
        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);

        var assemblies = new[]
        {
            typeof(StronglyTypedIdAttribute).Assembly,
            typeof(System.Text.Json.JsonSerializer).Assembly,
            typeof(Newtonsoft.Json.JsonSerializer).Assembly
        };

        var references = AppDomain.CurrentDomain
            .GetAssemblies()
            .Union(assemblies)
            .Distinct()
            .Where(assembly => !assembly.IsDynamic)
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>();

        var compilation = CSharpCompilation.Create(
            "Len.StronglyTypedId.Generator.Test",
            new[] { syntaxTree },
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary)
        );

        // Source Generator to test
        var generator = new StronglyTypedIdGenerator();

        var ee = CSharpGeneratorDriver
            .Create(generator)
            .RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

        // optional
        diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error).Should().BeEmpty();

        return outputCompilation.SyntaxTrees.Skip(1).Select(s => s?.ToString());
    }
}
